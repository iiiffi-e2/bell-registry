generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailChangeRequest {
  id        String   @id @default(cuid())
  userId    String
  newEmail  String
  token     String   @unique
  expires   DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model User {
  id                        String               @id @default(cuid())
  email                     String               @unique
  emailVerified             DateTime?
  role                      UserRole             @default(PROFESSIONAL)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  firstName                 String?
  lastName                  String?
  phoneNumber               String?
  image                     String?
  password                  String?
  profileSlug               String?              @unique
  isDemo                    Boolean              @default(false)
  resetToken                String?              @unique
  resetTokenExpiry          DateTime?            @db.Timestamptz(6)
  isAnonymous               Boolean              @default(false)
  deletedAt                 DateTime?            @db.Timestamptz(6)
  isDeleted                 Boolean              @default(false)
  lastLoginAt               DateTime?            @db.Timestamptz(6)
  lastProfileReminderSentAt DateTime?            @db.Timestamptz(6)
  dontContactMe             Boolean              @default(false)
  customInitials            String?              @db.VarChar(3)
  surveyDismissedAt         DateTime?            @db.Timestamptz(6)
  twoFactorBackupCodes      String[]
  twoFactorEnabled          Boolean              @default(false)
  twoFactorPhone            String?
  twoFactorSecret           String?
  isSuspended               Boolean              @default(false)
  isBanned                  Boolean              @default(false)
  suspensionReason          String?
  suspensionNote            String?
  suspendedAt               DateTime?            @db.Timestamptz(6)
  suspendedBy               String?
  bannedAt                  DateTime?            @db.Timestamptz(6)
  bannedBy                  String?
  membershipAccess         MembershipAccessType @default(NEW_APPLICANT)
  referralProfessionalName String?
  accounts                  Account[]
  adminAuditLogs            AdminAuditLog[]      @relation("AdminAuditLogs")
  approvedProfiles          CandidateProfile[]   @relation("ProfileApprover")
  rejectedProfiles          CandidateProfile[]   @relation("ProfileRejecter")
  candidateProfile          CandidateProfile?
  clientConversations       Conversation[]       @relation("ClientConversations")
  professionalConversations Conversation[]       @relation("ProfessionalConversations")
  emailChangeRequests       EmailChangeRequest[]
  employerProfile           EmployerProfile?
  approvedJobs              Job[]                @relation("JobApprover")
  postedJobs                Job[]
  rejectedJobs              Job[]                @relation("JobRejecter")
  jobAlerts                 JobAlert[]
  applications              JobApplication[]
  jobMatches                JobMatch[]
  jobViewEvents             JobViewEvent[]
  sentMessages              Message[]            @relation("SentMessages")
  profileReports            ProfileReport[]      @relation("ReportedUser")
  reportsMade               ProfileReport[]      @relation("ReporterUser")
  reviewedReports           ProfileReport[]      @relation("ReviewerUser")
  profileViewEvents         ProfileViewEvent[]
  savedCandidates           SavedCandidate[]     @relation("SavedCandidates")
  savedByEmployers          SavedCandidate[]     @relation("SavedByEmployers")
  savedJobs                 SavedJob[]
  sessions                  Session[]
  systemSettings            SystemSettings[]     @relation("SystemSettingsAdmin")
  trustedDevices            TrustedDevice[]
  bannedByAdmin             User?                @relation("BannedByAdmin", fields: [bannedBy], references: [id])
  bannedUsers               User[]               @relation("BannedByAdmin")
  suspendedByAdmin          User?                @relation("SuspendedByAdmin", fields: [suspendedBy], references: [id])
  suspendedUsers            User[]                     @relation("SuspendedByAdmin")
  messageBoardThreads       MessageBoardThread[]       @relation("ThreadAuthor")
  messageBoardReplies       MessageBoardReply[]        @relation("ReplyAuthor")
  messageBoardThreadLikes   MessageBoardThreadLike[]   @relation("ThreadLikes")
  messageBoardReplyLikes    MessageBoardReplyLike[]    @relation("ReplyLikes")

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([lastLoginAt])
  @@index([lastProfileReminderSentAt])
  @@index([isSuspended])
  @@index([isBanned])
  @@index([suspendedAt])
  @@index([bannedAt])
}

model CandidateProfile {
  id                   String        @id @default(cuid())
  userId               String        @unique
  bio                  String?
  skills               String[]
  experience           Json[]
  certifications       String[]
  availability         DateTime?
  resumeUrl            String?
  photoUrl             String?
  location             String?
  profileViews         Int           @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  title                String?
  additionalPhotos     String[]
  currentLocation      String?
  headshot             String?
  idealEnvironment     String?
  mediaUrls            String[]
  openToRelocation     Boolean       @default(false)
  payRangeMax          Float?
  payRangeMin          Float?
  preferredRole        String?
  seekingOpportunities String[]
  whatImSeeking        String?
  whatSetsApartMe      String?
  whyIEnjoyThisWork    String?
  workLocations        String[]
  yearsOfExperience    Int?
  payType              String?       @default("Salary")
  openToWork           Boolean       @default(false)
  employmentType       String?
  approvedAt           DateTime?
  approvedBy           String?
  rejectedAt           DateTime?
  rejectedBy           String?
  rejectionReason      String?
  status               ProfileStatus @default(PENDING)
  approver             User?         @relation("ProfileApprover", fields: [approvedBy], references: [id])
  rejecter             User?         @relation("ProfileRejecter", fields: [rejectedBy], references: [id])
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id                      String           @id @default(cuid())
  userId                  String           @unique
  companyName             String
  industry                String?
  description             String?
  website                 String?
  logoUrl                 String?
  location                String?
  subscriptionPlan        String?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  hasNetworkAccess        Boolean          @default(false)
  jobPostLimit            Int?             @default(5)
  jobsPostedCount         Int              @default(0)
  stripeCustomerId        String?
  stripeSessionId         String?
  subscriptionEndDate     DateTime?
  subscriptionStartDate   DateTime         @default(now())
  subscriptionType        SubscriptionType @default(TRIAL)
  publicSlug              String?          @unique
  jobCredits              Int              @default(0)
  networkAccessEndDate    DateTime?
  unlimitedPostingEndDate DateTime?
  autoRenew               Boolean          @default(false)
  renewalPeriod           String?
  billingHistory          BillingHistory[]
  user                    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([publicSlug])
  @@index([jobCredits])
  @@index([networkAccessEndDate])
  @@index([unlimitedPostingEndDate])
}

model BillingHistory {
  id                String           @id @default(cuid())
  employerProfileId String
  amount            Float
  currency          String           @default("usd")
  description       String
  subscriptionType  SubscriptionType
  stripeSessionId   String?
  stripeInvoiceId   String?
  status            BillingStatus    @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employerProfile   EmployerProfile  @relation(fields: [employerProfileId], references: [id], onDelete: Cascade)

  @@index([employerProfileId])
  @@index([status])
  @@index([createdAt])
}

model Job {
  id                     String           @id @default(cuid())
  employerId             String
  title                  String
  description            String
  location               String
  salary                 Json?
  requirements           String[]
  status                 JobStatus        @default(ACTIVE)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  expiresAt              DateTime?
  featured               Boolean          @default(false)
  employmentType         String?
  jobType                String?
  isDemo                 Boolean          @default(false)
  urlSlug                String           @unique
  professionalRole       String
  adminStatus            JobAdminStatus   @default(PENDING)
  approvedAt             DateTime?
  approvedBy             String?
  rejectedAt             DateTime?
  rejectedBy             String?
  rejectionReason        String?
  exceptionalOpportunity String?
  listingCloseDate       DateTime?
  approver               User?            @relation("JobApprover", fields: [approvedBy], references: [id])
  employer               User             @relation(fields: [employerId], references: [id])
  rejecter               User?            @relation("JobRejecter", fields: [rejectedBy], references: [id])
  applications           JobApplication[]
  matches                JobMatch[]
  viewEvents             JobViewEvent[]
  savedCandidates        SavedCandidate[]
  savedBy                SavedJob[]

  @@index([exceptionalOpportunity])
  @@index([listingCloseDate])
}

model JobApplication {
  id             String            @id @default(cuid())
  jobId          String
  candidateId    String
  status         ApplicationStatus @default(PENDING)
  coverLetter    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  coverLetterUrl String?
  message        String?
  resumeUrl      String?
  candidate      User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job            Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
}

model SavedJob {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

model SavedCandidate {
  id          String   @id @default(cuid())
  candidateId String
  employerId  String
  createdAt   DateTime @default(now())
  jobId       String?
  note        String?
  candidate   User     @relation("SavedCandidates", fields: [candidateId], references: [id], onDelete: Cascade)
  employer    User     @relation("SavedByEmployers", fields: [employerId], references: [id], onDelete: Cascade)
  job         Job?     @relation(fields: [jobId], references: [id])

  @@unique([candidateId, employerId])
}

model Conversation {
  id             String             @id @default(cuid())
  clientId       String
  professionalId String
  status         ConversationStatus @default(ACTIVE)
  lastMessageAt  DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  client         User               @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  professional   User               @relation("ProfessionalConversations", fields: [professionalId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([clientId, professionalId])
  @@index([professionalId])
  @@index([clientId])
  @@index([status])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversationId String
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([read])
}

model ProfileViewEvent {
  id       String   @id @default(cuid())
  userId   String
  viewedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model JobViewEvent {
  id       String   @id @default(cuid())
  jobId    String
  userId   String?
  viewedAt DateTime @default(now())
  job      Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([userId])
}

model JobAlert {
  id        String         @id @default(cuid())
  userId    String
  name      String
  roles     String[]
  locations String[]
  frequency AlertFrequency @default(WEEKLY)
  isActive  Boolean        @default(true)
  lastSent  DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([frequency])
}

model JobMatch {
  id           String   @id @default(cuid())
  userId       String
  jobId        String
  score        Float
  reasoning    String
  matchFactors Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([userId])
  @@index([score])
}

model TrustedDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceToken String   @unique
  deviceName  String?
  userAgent   String
  ipAddress   String
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceToken])
  @@index([expiresAt])
}

model ProfileReport {
  id             String              @id @default(cuid())
  reportedUserId String
  reporterUserId String?
  reason         String
  details        String?
  status         ProfileReportStatus @default(PENDING)
  reviewedAt     DateTime?
  reviewedBy     String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  reportedUser   User                @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reporterUser   User?               @relation("ReporterUser", fields: [reporterUserId], references: [id], onDelete: Cascade)
  reviewer       User?               @relation("ReviewerUser", fields: [reviewedBy], references: [id])

  @@index([reportedUserId])
  @@index([reporterUserId])
  @@index([status])
  @@index([createdAt])
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetId   String?
  targetType String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([adminId])
  @@index([createdAt])
  @@index([targetType])
}

model SystemSettings {
  id           String   @id @default(cuid())
  settingKey   String   @unique
  settingValue String
  description  String?
  updatedBy    String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  admin        User     @relation("SystemSettingsAdmin", fields: [updatedBy], references: [id])

  @@index([settingKey])
  @@index([updatedAt])
}

enum MembershipAccessType {
  BELL_REGISTRY_REFERRAL
  PROFESSIONAL_REFERRAL
  NEW_APPLICANT
  EMPLOYER
  AGENCY
}

enum UserRole {
  PROFESSIONAL
  EMPLOYER
  AGENCY
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
  INTERVIEWING
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

enum AlertFrequency {
  DAILY
  WEEKLY
}

enum ConversationStatus {
  ACTIVE
  ENDED
}

enum SubscriptionType {
  TRIAL
  SPOTLIGHT
  BUNDLE
  UNLIMITED
  NETWORK
  NETWORK_QUARTERLY
}

enum BillingStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProfileReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum ProfileStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  BANNED
}

enum JobAdminStatus {
  PENDING
  APPROVED
  REJECTED
}

model MessageBoardThread {
  id          String                    @id @default(cuid())
  title       String
  content     String
  authorId    String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  lastReplyAt DateTime                  @default(now())
  isLocked    Boolean                   @default(false)
  isPinned    Boolean                   @default(false)
  author      User                      @relation("ThreadAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  replies     MessageBoardReply[]
  likes       MessageBoardThreadLike[]

  @@index([createdAt])
  @@index([lastReplyAt])
  @@index([isPinned])
}

model MessageBoardReply {
  id        String                   @id @default(cuid())
  content   String
  authorId  String
  threadId  String
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  author    User                     @relation("ReplyAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  thread    MessageBoardThread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  likes     MessageBoardReplyLike[]

  @@index([threadId])
  @@index([createdAt])
}

model MessageBoardThreadLike {
  id        String             @id @default(cuid())
  threadId  String
  userId    String
  createdAt DateTime           @default(now())
  thread    MessageBoardThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user      User               @relation("ThreadLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@index([threadId])
  @@index([userId])
}

model MessageBoardReplyLike {
  id        String            @id @default(cuid())
  replyId   String
  userId    String
  createdAt DateTime          @default(now())
  reply     MessageBoardReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User              @relation("ReplyLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId])
  @@index([replyId])
  @@index([userId])
}

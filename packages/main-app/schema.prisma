// This file references the shared schema for local Prisma client generation
// The actual schema is maintained in packages/shared/src/database/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  firstName             String?
  lastName              String?
  image                 String?
  role                  UserRole  @default(PROFESSIONAL)
  profileSlug           String?   @unique
  phoneNumber           String?
  isAnonymous           Boolean   @default(false)
  customInitials        String?
  dontContactMe         Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  isDeleted             Boolean   @default(false)
  deletedAt             DateTime?
  surveyDismissedAt     DateTime?
  resetTokenHash        String?
  resetTokenExpiry      DateTime?

  // Two-factor authentication
  twoFactorSecret       String?
  twoFactorEnabled      Boolean   @default(false)
  twoFactorBackupCodes  String[]

  // Trusted devices for 2FA
  trustedDevices        TrustedDevice[]

  // Relations
  accounts              Account[]
  sessions              Session[]
  candidateProfile      CandidateProfile?
  employerProfile       EmployerProfile?
  
  // Job relations
  jobsPosted            Job[]                @relation("JobEmployer")
  jobApplications       JobApplication[]     @relation("JobApplicationCandidate")
  savedJobs             SavedJob[]
  jobAlerts             JobAlert[]
  savedCandidates       SavedCandidate[]     @relation("SavedCandidateEmployer")
  candidateSaves        SavedCandidate[]     @relation("SavedCandidateCandidate")
  
  // Messaging
  sentMessages          Message[]            @relation("MessageSender")
  receivedMessages      Message[]            @relation("MessageRecipient")
  conversations         ConversationParticipant[]
  
  // Profile interactions
  profileViews          ProfileViewEvent[]
  
  // Billing & subscription
  billingRecords        BillingRecord[]
  subscriptionRecord    SubscriptionRecord?

  // Email change requests
  emailChangeRequests   EmailChangeRequest[]
  
  // Admin audit logs
  adminAuditLogs        AdminAuditLog[]      @relation("AdminAuditLogs")

  @@map("User")
}

// Enums
enum UserRole {
  PROFESSIONAL
  EMPLOYER
  AGENCY
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
  INTERVIEWING
  CLOSED
}

enum SubscriptionType {
  TRIAL
  SPOTLIGHT
  BUNDLE
  UNLIMITED
  NETWORK
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AlertFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

// Placeholder models (minimal for compilation)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

model CandidateProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  title                 String?
  bio                   String?
  location              String?
  workLocations         String[]
  openToRelocation      Boolean   @default(false)
  yearsOfExperience     Int?
  availability          DateTime?
  skills                String[]
  experience            String[]
  certifications        String[]
  resumeUrl             String?
  profileViews          Int       @default(0)
  openToWork            Boolean   @default(true)
  preferredRole         String?
  whatImSeeking         String?
  whyIEnjoyThisWork     String?
  whatSetsApartMe       String?
  idealEnvironment      String?
  seekingOpportunities  String[]
  payRangeMin           Int?
  payRangeMax           Int?
  payType               String?   @default("Salary")
  additionalPhotos      String[]
  mediaUrls             String[]
  employmentType        String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String?
  description String?
  website     String?
  location    String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id               String         @id @default(cuid())
  title            String
  professionalRole String
  description      String
  location         String?
  requirements     String[]
  salary           String?
  jobType          String?
  employmentType   String?
  status           JobStatus      @default(DRAFT)
  featured         Boolean        @default(false)
  urlSlug          String?        @unique
  expiresAt        DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  employerId       String
  
  employer         User           @relation("JobEmployer", fields: [employerId], references: [id])
  applications     JobApplication[]
  savedBy          SavedJob[]
}

model JobApplication {
  id              String            @id @default(cuid())
  jobId           String
  candidateId     String
  resumeUrl       String
  coverLetterUrl  String?
  message         String?
  status          ApplicationStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate       User              @relation("JobApplicationCandidate", fields: [candidateId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, candidateId])
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
}

model JobAlert {
  id              String         @id @default(cuid())
  userId          String
  searchQuery     String
  location        String?
  professionalRole String?
  frequency       AlertFrequency @default(WEEKLY)
  isActive        Boolean        @default(true)
  lastSent        DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedCandidate {
  id          String   @id @default(cuid())
  employerId  String
  candidateId String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  employer    User     @relation("SavedCandidateEmployer", fields: [employerId], references: [id], onDelete: Cascade)
  candidate   User     @relation("SavedCandidateCandidate", fields: [candidateId], references: [id], onDelete: Cascade)
  
  @@unique([employerId, candidateId])
}

model Conversation {
  id            String                    @id @default(cuid())
  status        ConversationStatus        @default(ACTIVE)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  recipientId    String
  content        String
  createdAt      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient      User         @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
}

model ProfileViewEvent {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionRecord {
  id                 String           @id @default(cuid())
  userId             String           @unique
  subscriptionType   SubscriptionType
  stripeCustomerId   String?
  stripeSubscriptionId String?
  status             String
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BillingRecord {
  id            String        @id @default(cuid())
  userId        String
  amount        Int
  currency      String        @default("usd")
  description   String?
  status        BillingStatus @default(PENDING)
  stripeInvoiceId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailChangeRequest {
  id         String   @id @default(cuid())
  userId     String
  newEmail   String
  token      String   @unique
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrustedDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceHash  String
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceHash])
}

model AdminAuditLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  admin     User     @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: Cascade)
} 
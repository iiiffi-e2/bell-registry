// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?   // Optional to support both OAuth and email/password
  role          UserRole  @default(CANDIDATE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileSlug   String?   @unique  // Unique slug for public profile URL

  // NextAuth.js fields
  accounts      Account[]
  sessions      Session[]

  // Shared fields
  firstName     String?
  lastName      String?
  phoneNumber   String?
  image         String?
  
  // Candidate specific fields
  candidateProfile CandidateProfile?
  applications     JobApplication[]
  savedJobs       SavedJob[]
  
  // Employer specific fields
  employerProfile  EmployerProfile?
  postedJobs      Job[]
  
  // Messaging
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
}

model CandidateProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?   @db.Text
  skills          String[]
  experience      Json[]    // Array of work history objects
  certifications  String[]
  availability    DateTime?
  resumeUrl       String?
  photoUrl        String?
  location        String?
  profileViews    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EmployerProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName     String
  industry        String?
  description     String?   @db.Text
  website         String?
  logoUrl         String?
  location        String?
  subscriptionPlan String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Job {
  id              String    @id @default(cuid())
  employerId      String
  employer        User      @relation(fields: [employerId], references: [id])
  title           String
  description     String    @db.Text
  location        String
  salary          Json?     // { min: number, max: number, currency: string }
  requirements    String[]
  status          JobStatus @default(ACTIVE)
  applications    JobApplication[]
  savedBy         SavedJob[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?
}

model JobApplication {
  id              String    @id @default(cuid())
  jobId           String
  job             Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidateId     String
  candidate       User      @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  status          ApplicationStatus @default(PENDING)
  coverLetter     String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SavedJob {
  id              String    @id @default(cuid())
  jobId           String
  job             Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())

  @@unique([jobId, userId])
}

model Message {
  id              String    @id @default(cuid())
  content         String    @db.Text
  senderId        String
  sender          User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId      String
  receiver        User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  read            Boolean   @default(false)
  createdAt       DateTime  @default(now())
} 
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailChangeRequest {
  id        String   @id @default(cuid())
  userId    String
  newEmail  String
  token     String   @unique
  expires   DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  emailVerified       DateTime?
  role                UserRole             @default(PROFESSIONAL)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  firstName           String?
  lastName            String?
  phoneNumber         String?
  image               String?
  password            String?
  profileSlug         String?              @unique
  accounts            Account[]
  candidateProfile    CandidateProfile?
  emailChangeRequests EmailChangeRequest[]
  employerProfile     EmployerProfile?
  postedJobs          Job[]
  applications        JobApplication[]
  receivedMessages    Message[]            @relation("ReceivedMessages")
  sentMessages        Message[]            @relation("SentMessages")
  savedJobs           SavedJob[]
  sessions            Session[]
  profileViewEvents   ProfileViewEvent[]
  isDemo              Boolean              @default(false)
  resetToken          String?              @unique
  resetTokenExpiry    DateTime?            @db.Timestamptz(6)
  isAnonymous         Boolean              @default(false)
  jobAlerts           JobAlert[]
}

model CandidateProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  bio                  String?
  skills               String[]
  experience           Json[]
  certifications       String[]
  availability         DateTime?
  resumeUrl            String?
  photoUrl             String?
  location             String?
  profileViews         Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  title                String?
  additionalPhotos     String[]
  currentLocation      String?
  headshot             String?
  idealEnvironment     String?
  mediaUrls            String[]
  openToRelocation     Boolean   @default(false)
  payCurrency          String?   @default("USD")
  payRangeMax          Float?
  payRangeMin          Float?
  preferredRole        String?
  seekingOpportunities String[]
  whatImSeeking        String?
  whatSetsApartMe      String?
  whyIEnjoyThisWork    String?
  workLocations        String[]
  yearsOfExperience    Int?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  companyName      String
  industry         String?
  description      String?
  website          String?
  logoUrl          String?
  location         String?
  subscriptionPlan String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String           @id @default(cuid())
  employerId   String
  title        String
  description  String
  location     String
  salary       Json?
  requirements String[]
  status       JobStatus        @default(ACTIVE)
  jobType      String?         // Full-time, Part-time, Contract, Temporary
  employmentType String?       // On-site, Remote, Hybrid
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  expiresAt    DateTime?
  featured     Boolean          @default(false)
  employer     User             @relation(fields: [employerId], references: [id])
  applications JobApplication[]
  savedBy      SavedJob[]
  isDemo       Boolean          @default(false)
}

model JobApplication {
  id          String            @id @default(cuid())
  jobId       String
  candidateId String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  candidate   User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model SavedJob {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model ProfileViewEvent {
  id        String   @id @default(cuid())
  userId    String
  viewedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model JobAlert {
  id          String         @id @default(cuid())
  userId      String
  name        String
  roles       String[]
  locations   String[]
  frequency   AlertFrequency @default(WEEKLY)
  isActive    Boolean        @default(true)
  lastSent    DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([frequency])
}

enum UserRole {
  PROFESSIONAL
  EMPLOYER
  AGENCY
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

enum AlertFrequency {
  DAILY
  WEEKLY
}

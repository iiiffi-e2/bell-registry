generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailChangeRequest {
  id        String   @id @default(cuid())
  userId    String
  newEmail  String
  token     String   @unique
  expires   DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model User {
  id                        String               @id @default(cuid())
  email                     String               @unique
  emailVerified             DateTime?
  role                      UserRole             @default(PROFESSIONAL)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  firstName                 String?
  lastName                  String?
  phoneNumber               String?
  image                     String?
  password                  String?
  profileSlug               String?              @unique
  isDemo                    Boolean              @default(false)
  resetToken                String?              @unique
  resetTokenExpiry          DateTime?            @db.Timestamptz(6)
  isAnonymous               Boolean              @default(false)
  customInitials            String?              @db.VarChar(3)
  dontContactMe             Boolean              @default(false)
  isDeleted                 Boolean              @default(false)
  deletedAt                 DateTime?            @db.Timestamptz(6)
  lastLoginAt               DateTime?            @db.Timestamptz(6)
  lastProfileReminderSentAt DateTime?            @db.Timestamptz(6)
  surveyDismissedAt         DateTime?            @db.Timestamptz(6)
  accounts                  Account[]
  candidateProfile          CandidateProfile?
  clientConversations       Conversation[]       @relation("ClientConversations")
  professionalConversations Conversation[]       @relation("ProfessionalConversations")
  emailChangeRequests       EmailChangeRequest[]
  employerProfile           EmployerProfile?
  postedJobs                Job[]
  jobAlerts                 JobAlert[]
  applications              JobApplication[]
  jobMatches                JobMatch[]
  jobViewEvents             JobViewEvent[]
  sentMessages              Message[]            @relation("SentMessages")
  profileViewEvents         ProfileViewEvent[]
  savedCandidates           SavedCandidate[]     @relation("SavedCandidates")
  savedByEmployers          SavedCandidate[]     @relation("SavedByEmployers")
  savedJobs                 SavedJob[]
  sessions                  Session[]

  @@index([isDeleted])
  @@index([deletedAt])
  @@index([lastLoginAt])
  @@index([lastProfileReminderSentAt])
}

model CandidateProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  bio                  String?
  skills               String[]
  experience           Json[]
  certifications       String[]
  availability         DateTime?
  resumeUrl            String?
  photoUrl             String?
  location             String?
  profileViews         Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  title                String?
  additionalPhotos     String[]
  currentLocation      String?
  headshot             String?
  idealEnvironment     String?
  mediaUrls            String[]
  openToRelocation     Boolean   @default(false)
  openToWork           Boolean   @default(false)
  payType              String?   @default("Salary")
  payRangeMax          Float?
  payRangeMin          Float?
  preferredRole        String?
  seekingOpportunities String[]
  whatImSeeking        String?
  whatSetsApartMe      String?
  whyIEnjoyThisWork    String?
  workLocations        String[]
  yearsOfExperience    Int?
  employmentType       String?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id                    String           @id @default(cuid())
  userId                String           @unique
  companyName           String
  industry              String?
  description           String?
  website               String?
  logoUrl               String?
  location              String?
  subscriptionPlan      String?
  subscriptionType      SubscriptionType @default(TRIAL)
  subscriptionStartDate DateTime         @default(now())
  subscriptionEndDate   DateTime?
  jobPostLimit          Int?             @default(5)
  jobsPostedCount       Int              @default(0)
  stripeCustomerId      String?
  stripeSessionId       String?
  hasNetworkAccess      Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  billingHistory        BillingHistory[]
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BillingHistory {
  id                String           @id @default(cuid())
  employerProfileId String
  amount            Float
  currency          String           @default("usd")
  description       String
  subscriptionType  SubscriptionType
  stripeSessionId   String?
  stripeInvoiceId   String?
  status            BillingStatus    @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employerProfile   EmployerProfile  @relation(fields: [employerProfileId], references: [id], onDelete: Cascade)

  @@index([employerProfileId])
  @@index([status])
  @@index([createdAt])
}

model Job {
  id               String           @id @default(cuid())
  employerId       String
  title            String
  description      String
  location         String
  salary           Json?
  requirements     String[]
  status           JobStatus        @default(ACTIVE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  expiresAt        DateTime?
  featured         Boolean          @default(false)
  employmentType   String?
  jobType          String?
  isDemo           Boolean          @default(false)
  urlSlug          String           @unique
  professionalRole String
  employer         User             @relation(fields: [employerId], references: [id])
  applications     JobApplication[]
  matches          JobMatch[]
  viewEvents       JobViewEvent[]
  savedCandidates  SavedCandidate[]
  savedBy          SavedJob[]
}

model JobApplication {
  id             String            @id @default(cuid())
  jobId          String
  candidateId    String
  status         ApplicationStatus @default(PENDING)
  coverLetter    String?
  resumeUrl      String?
  coverLetterUrl String?
  message        String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  candidate      User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job            Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
}

model SavedJob {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

model SavedCandidate {
  id          String   @id @default(cuid())
  candidateId String
  employerId  String
  createdAt   DateTime @default(now())
  jobId       String?
  note        String?
  candidate   User     @relation("SavedCandidates", fields: [candidateId], references: [id], onDelete: Cascade)
  employer    User     @relation("SavedByEmployers", fields: [employerId], references: [id], onDelete: Cascade)
  job         Job?     @relation(fields: [jobId], references: [id])

  @@unique([candidateId, employerId])
}

model Conversation {
  id             String             @id @default(cuid())
  clientId       String
  professionalId String
  status         ConversationStatus @default(ACTIVE)
  lastMessageAt  DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  client         User               @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  professional   User               @relation("ProfessionalConversations", fields: [professionalId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([clientId, professionalId])
  @@index([professionalId])
  @@index([clientId])
  @@index([status])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  read           Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([read])
}

model ProfileViewEvent {
  id       String   @id @default(cuid())
  userId   String
  viewedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model JobViewEvent {
  id       String   @id @default(cuid())
  jobId    String
  userId   String?
  viewedAt DateTime @default(now())
  job      Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([userId])
}

model JobAlert {
  id        String         @id @default(cuid())
  userId    String
  name      String
  roles     String[]
  locations String[]
  frequency AlertFrequency @default(WEEKLY)
  isActive  Boolean        @default(true)
  lastSent  DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([frequency])
}

model JobMatch {
  id           String   @id @default(cuid())
  userId       String
  jobId        String
  score        Float
  reasoning    String
  matchFactors Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([userId])
  @@index([score])
}

enum UserRole {
  PROFESSIONAL
  EMPLOYER
  AGENCY
  ADMIN
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
  INTERVIEWING
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
  ACCEPTED
}

enum AlertFrequency {
  DAILY
  WEEKLY
}

enum ConversationStatus {
  ACTIVE
  ENDED
}

enum SubscriptionType {
  TRIAL
  SPOTLIGHT
  BUNDLE
  UNLIMITED
  NETWORK
}

enum BillingStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
